/* cmdline.h */

/* File autogenerated by gengetopt version 2.15  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION VERSION
#endif

struct gengetopt_args_info
{
  int forward_flag;	/* Score forward strand (default=off).  */
  int reverse_flag;	/* Score reverse strand (default=off).  */
  int both_strands_flag;	/* Score both strands (default=off).  */
  char * outfile_arg;	/* Output filename.  */
  char * outfile_orig;	/* Output filename original value given at command line.  */
  char * window_arg;	/* Score window.  */
  char * window_orig;	/* Score window original value given at command line.  */
  float cutoff_arg;	/* Probability cutoff.  */
  char * cutoff_orig;	/* Probability cutoff original value given at command line.  */
  int show_gaps_flag;	/* Display alignment with gap (default=off).  */
  int predict_strand_flag;	/* Use strand predictor (default=off).  */
  int dinucleotide_zscore; /* Wheter to use dinucleotide shuffled z-scores */
  int structural; /* Wheter to use structural decision model */
  int rna_features; /* Whether to use rna features decision model */ 
  int avoid_shuffle; /* Wheter to use explicite shuffling for z-scores or not. */

  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int forward_given ;	/* Whether forward was given.  */
  int reverse_given ;	/* Whether reverse was given.  */
  int both_strands_given ;	/* Whether both-strands was given.  */
  int outfile_given ;	/* Whether outfile was given.  */
  int window_given ;	/* Whether window was given.  */
  int cutoff_given ;	/* Whether cutoff was given.  */
  int show_gaps_given ;	/* Whether show-gaps was given.  */
  int predict_strand_given ;	/* Whether predict-strand was given.  */
  

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
